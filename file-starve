#!/usr/bin/env python3

from argparse import ArgumentParser
from ctypes import CDLL
from os import _exit, listdir, sysconf, sysconf_names
from signal import SIGHUP, SIGINT, SIGQUIT, SIGTERM, signal
from time import monotonic


def log(msg):
    """
    """
    print(msg)
    if separate_log:
        logging.info(msg)


def signal_handler(signum, frame):
    """
    """
    log('\ngot signal {}'.format(signum))
    _exit(1)


def mlockall():
    """
    """
    MCL_CURRENT = 1
    MCL_ONFAULT = 4

    libc = CDLL(None, use_errno=True)
    result = libc.mlockall(MCL_CURRENT | MCL_ONFAULT)

    if result != 0:
        result = libc.mlockall(MCL_CURRENT)
        if result != 0:
            log('W: cannot lock current process memory')
        else:
            log('process memory locked with MCL_CURRENT')
    else:
        log('process memory locked with MCL_CURRENT | MCL_ONFAULT')


def check_meminfo():
    """
    return KiB
    """
    fd[MEMINFO].seek(0)
    m_list = fd[MEMINFO].read().decode().split(' kB\n')

    mem_free = int(m_list[mem_free_index].split(':')[1])
    active_file = int(m_list[active_file_index].split(':')[1])
    inactive_file = int(m_list[inactive_file_index].split(':')[1])

    return mem_free, active_file + inactive_file


def check_vmstat():
    """
    """
    fd[VMSTAT].seek(0)
    lines = fd[VMSTAT].read().decode().split('\n')

    pgpgin = int(lines[pgpgin_index].split(' ')[1]) / K
    pgpgout = int(lines[pgpgout_index].split(' ')[1]) / K

    pswpin = int(lines[pswpin_index].split(' ')[1])
    pswpout = int(lines[pswpout_index].split(' ')[1])

    pgfree = int(lines[pgfree_index].split(' ')[1])

    pgfault = int(lines[pgfault_index].split(' ')[1])
    pgmajfault = int(lines[pgmajfault_index].split(' ')[1])

    pgsteal_kswapd = int(lines[pgsteal_kswapd_index].split(' ')[1])
    pgsteal_direct = int(lines[pgsteal_direct_index].split(' ')[1])

    pgscan_kswapd = int(lines[pgscan_kswapd_index].split(' ')[1])
    pgscan_direct = int(lines[pgscan_direct_index].split(' ')[1])

    return (pgpgin, pgpgout, pswpin, pswpout, pgfree, pgfault, pgmajfault,
            pgsteal_kswapd + pgsteal_direct, pgscan_kswapd, pgscan_direct)


def check_psi():
    """
    return microseconds
    """
    fd[PSI_IO].seek(0)
    fd[PSI_MEMORY].seek(0)

    some_i, full_i, _ = fd[PSI_IO].read().decode().split('\n')
    some_m, full_m, _ = fd[PSI_MEMORY].read().decode().split('\n')

    total_some_i = int(some_i.partition('total=')[2])
    total_full_i = int(full_i.partition('total=')[2])

    total_some_m = int(some_m.partition('total=')[2])
    total_full_m = int(full_m.partition('total=')[2])

    return (total_some_i, total_full_i, total_some_m, total_full_m)


def check_diskstats():
    """
    """
    fd[DISKSTATS].seek(0)

    dev_lines = fd[DISKSTATS].read().decode().split('\n')

    dev_ok = False
    for dev_line in dev_lines:
        if DEV_SEPARATOR in dev_line:
            _, _, line_rpart = dev_line.rpartition(DEV_SEPARATOR)
            dev_ok = True

    if not dev_ok:
        log('device not found')
        log('check /proc/diskstats to find available devices')
        exit(1)

    (r_ios, _, r_sectors, r_ticks, w_ios, _, w_sectors, w_ticks, _, active
     ) = line_rpart.split()[:10]

    r_ios = int(r_ios)
    r_mib = int(r_sectors) * SECTOR / M
    r_wait = int(r_ticks) / T

    w_ios = int(w_ios)
    w_mib = int(w_sectors) * SECTOR / M
    w_wait = int(w_ticks) / T

    active = int(active) / T

    return (r_ios, r_mib, r_wait, w_ios, w_mib, w_wait, active)


def check_stime(pid):
    """
    """
    fd[pid].seek(0)
    try:
        stime = int(fd[pid].read().decode('utf-8', 'ignore').rpartition(')')[
            2].split(' ')[13])
    except ProcessLookupError:
        stime = 0
    return stime


def get_kswapd():
    """
    """
    kswapd_list = []
    proc_list = listdir('/proc')
    for pid in proc_list:
        try:
            with open('/proc/{}/stat'.format(pid), 'rb', buffering=0) as f:
                a, _, b = f.read().decode('utf-8', 'ignore').rpartition(')')
                minflt = int(b.split(' ')[8])
                # kthreads have zero minflt
                if minflt == 0:
                    name = a.partition('(')[2]
                    if name.startswith('kswapd'):
                        kswapd_list.append([pid, name])
        except Exception:
            pass
    return kswapd_list


def restrict_file_lists():
    """
    """
    log('trying to reach the target...')

    storage = []

    t_start = monotonic()

    while True:
        mem_free, mem_file = check_meminfo()

        if mem_file > mem_file_target:
            storage.append(bytearray(CHUNK))
        else:
            t_start_target = monotonic()
            dt = monotonic() - t_start

            (pgpgin0, pgpgout0, pswpin0, pswpout0, pgfree0, pgfault0,
             pgmajfault0, pgsteal0, pgscan_kswapd0, pgscan_direct0
             ) = check_vmstat()

            if PSI_OK:
                (total_some_i0, total_full_i0,
                 total_some_m0, total_full_m0
                 ) = check_psi()

            if DEV_OK:
                (r_ios0, r_mib0, r_wait0,
                 w_ios0, w_mib0, w_wait0,
                 active0) = check_diskstats()

            if KSWAPD_OK:
                for i in kswapd_list:
                    pid = i[0]
                    stime = check_stime(pid)
                    i.append(stime)

            log('target reached in {}s'.format(round(dt, 1)))
            log('  file: {}M, free: {}M, passed: 0.0s'.format(
                round(mem_file / K, 1),
                round(mem_free / K, 1),
            ))

            break

    mem_free_min = mem_free_max = mem_free
    mem_file_min = mem_file_max = mem_file

    mem_file_sum = mem_free_sum = count = 0

    t_old = t_start_target

    while True:
        dt = monotonic() - t_start_target

        if dt < timeout or count == 0:
            mem_free, mem_file = check_meminfo()

            t_new = monotonic()
            if t_new - t_old >= interval:
                t_old = monotonic()

                log('  file: {}M, free: {}M, passed: {}s'.format(
                    round(mem_file / K, 1),
                    round(mem_free / K, 1),
                    round(dt, 1)
                ))

            if mem_free < mem_free_min:
                mem_free_min = mem_free

            if mem_free > mem_free_max:
                mem_free_max = mem_free

            if mem_file < mem_file_min:
                mem_file_min = mem_file

            if mem_file > mem_file_max:
                mem_file_max = mem_file

            mem_file_sum += mem_file
            mem_free_sum += mem_free

            count += 1

            if mem_file > mem_file_target:
                storage.append(bytearray(CHUNK))
            else:
                if mem_free < mem_free_min * free_scale_factor:
                    try:
                        storage.pop()
                    except IndexError:
                        continue
        else:
            if VMSTAT_OK:
                (pgpgin1, pgpgout1, pswpin1, pswpout1, pgfree1, pgfault1,
                 pgmajfault1, pgsteal1, pgscan_kswapd1, pgscan_direct1
                 ) = check_vmstat()

                pgpgin = pgpgin1 - pgpgin0
                pgpgout = pgpgout1 - pgpgout0
                pswpin = pswpin1 - pswpin0
                pswpout = pswpout1 - pswpout0
                pgfree = pgfree1 - pgfree0
                pgfault = pgfault1 - pgfault0
                pgmajfault = pgmajfault1 - pgmajfault0
                pgsteal = pgsteal1 - pgsteal0
                pgscan_kswapd = pgscan_kswapd1 - pgscan_kswapd0
                pgscan_direct = pgscan_direct1 - pgscan_direct0
                vmeff = (pgsteal + 1) / (
                    pgscan_kswapd + pgscan_direct + 1) * 100

            if PSI_OK:
                (total_some_i1, total_full_i1, total_some_m1, total_full_m1
                 ) = check_psi()
                total_some_i_sec = (total_some_i1 - total_some_i0) / m
                total_full_i_sec = (total_full_i1 - total_full_i0) / m
                total_some_m_sec = (total_some_m1 - total_some_m0) / m
                total_full_m_sec = (total_full_m1 - total_full_m0) / m

            if DEV_OK:
                (r_ios1, r_mib1, r_wait1, w_ios1, w_mib1, w_wait1, active1
                 ) = check_diskstats()
                r_ios = r_ios1 - r_ios0
                r_mib = r_mib1 - r_mib0
                r_wait = r_wait1 - r_wait0
                w_ios = w_ios1 - w_ios0
                w_mib = w_mib1 - w_mib0
                w_wait = w_wait1 - w_wait0
                active = active1 - active0

            if KSWAPD_OK:
                for i in kswapd_list:
                    pid = i[0]
                    stime = check_stime(pid)
                    i.append(stime)

            log('  file: {}M, free: {}M, passed: {}s'.format(
                round(mem_file / K, 1),
                round(mem_free / K, 1),
                round(dt, 1)
            ))

            log('kept starved during {}s'.format(round(dt, 1)))

            mem_file_avg = mem_file_sum / count
            mem_free_avg = mem_free_sum / count

            log('file lists and free memory sizes after reaching the target:')

            log('  file: min={}M, max={}M, average={}M'.format(
                round(mem_file_min / K, 1),
                round(mem_file_max / K, 1),
                round(mem_file_avg / K, 1)
            ))

            log('  free: min={}M, max={}M, average={}M'.format(
                round(mem_free_min / K, 1),
                round(mem_free_max / K, 1),
                round(mem_free_avg / K, 1)
            ))

            if VMSTAT_OK:
                log('vmstat metrics for the last {}s:'.format(round(dt, 1)))

                log('  pgpgin:     {}M, {}M/s'.format(
                    round(pgpgin, 1),
                    round(pgpgin / dt, 1)
                ))

                log('  pgpgout:    {}M, {}M/s'.format(
                    round(pgpgout, 1),
                    round(pgpgout / dt, 1)
                ))

                log('  pswpin:     {}, {}/s'.format(
                    pswpin,
                    round(pswpin / dt, 1)
                ))

                log('  pswpout:    {}, {}/s'.format(
                    pswpout,
                    round(pswpout / dt, 1)
                ))

                log('  pgfree:     {}, {}/s'.format(
                    pgfree,
                    round(pgfree / dt, 1)
                ))

                log('  pgfault:    {}, {}/s'.format(
                    pgfault,
                    round(pgfault / dt, 1)
                ))

                log('  pgmajfault: {}, {}/s'.format(
                    pgmajfault,
                    round(pgmajfault / dt, 1)
                ))

                log('  pgsteal:    {}, {}/s'.format(
                    pgsteal,
                    round(pgsteal / dt, 1)
                ))

                log('  pgscank:    {}, {}/s'.format(
                    pgscan_kswapd,
                    round(pgscan_kswapd / dt, 1)
                ))

                log('  pgscand:    {}, {}/s'.format(
                    pgscan_direct,
                    round(pgscan_direct / dt, 1)
                ))

                log('  vmeff:      {}%'.format(round(vmeff, 1)))

            if PSI_OK:
                log('PSI metrics for the last {}s:'.format(round(dt, 1)))

                log('  some io:     {}s, {}%'.format(
                    round(total_some_i_sec, 1),
                    round(total_some_i_sec / dt * 100, 1)
                ))

                log('  full io:     {}s, {}%'.format(
                    round(total_full_i_sec, 1),
                    round(total_full_i_sec / dt * 100, 1)
                ))

                log('  some memory: {}s, {}%'.format(
                    round(total_some_m_sec, 1),
                    round(total_some_m_sec / dt * 100, 1)
                ))

                log('  full memory: {}s, {}%'.format(
                    round(total_full_m_sec, 1),
                    round(total_full_m_sec / dt * 100, 1)
                ))

            if DEV_OK:
                log('I/O statistics for {} device in the last {}s:'.format(
                    dev, round(dt, 1)
                ))

                log('  util: {}s, {}%'.format(
                    round(active, 1),
                    round(active / dt * 100, 1)
                ))

                log('  read: {}M, {}M/s'.format(
                    round(r_mib, 1),
                    round(r_mib / dt, 1)
                ))

                log('  read: {} transfers, {} tps'.format(
                    r_ios,
                    round(r_ios / dt, 1)
                ))

                log('  read: await {}s, {}%'.format(
                    round(r_wait, 1),
                    round(r_wait / dt * 100, 1)
                ))

                log('  write: {}M, {}M/s'.format(
                    round(w_mib, 1),
                    round(w_mib / dt, 1)
                ))

                log('  write: {} transfers, {} tps'.format(
                    w_ios,
                    round(w_ios / dt, 1)
                ))

                log('  write: await {}s, {}%'.format(
                    round(w_wait, 1),
                    round(w_wait / dt * 100, 1)
                ))

            if KSWAPD_OK:
                log('kswapd stime for the last {}s:'.format(round(dt, 1)))
                for i in kswapd_list:
                    pid = i[0]
                    name = i[1]
                    stime0 = i[2]
                    stime1 = i[3]
                    stime = stime1 - stime0
                    stime_sec = stime / SC_CLK_TCK
                    log('  {} (PID={}): {} ticks, {}s, {}%'.format(
                        name,
                        pid,
                        stime,
                        round(stime_sec, 1),
                        round(stime_sec / dt * 100, 1)
                    ))

            _exit(0)


parser = ArgumentParser()

parser.add_argument(
    '-t',
    '--target',
    help='target size of file LRU lists in MiB',
    default=20.0,
    type=float
)

parser.add_argument(
    '-T',
    '--timeout',
    help='timeout in seconds after reaching the target',
    default=60.0,
    type=float
)

parser.add_argument(
    '-s',
    '--scale',
    help='MemFree scale factor',
    default=1.5,
    type=float
)

parser.add_argument(
    '-c',
    '--chunk',
    help='chunk size in KiB',
    default=64,
    type=int
)

parser.add_argument(
    '-i',
    '--interval',
    help='output interval in seconds',
    default=5.0,
    type=float
)

parser.add_argument(
    '-d',
    '--dev',
    help='device name to track I/O stats',
    default='',
    type=str
)

parser.add_argument(
    '-l',
    '--log',
    help='path to log file',
    default=None,
    type=str
)

parser.add_argument(
    '-L',
    '--lock',
    help='lock current process memory (0 | 1)',
    default=1,
    type=int
)

args = parser.parse_args()

target = args.target
timeout = args.timeout
free_scale_factor = args.scale
chunk_size_kbytes = args.chunk
interval = args.interval
dev = args.dev
log_file = args.log
lock = args.lock


if log_file is None:
    separate_log = False
else:
    separate_log = True
    import logging

if separate_log:
    try:
        logging.basicConfig(
            filename=log_file,
            level=logging.INFO,
            format="%(asctime)s: %(message)s")
    except Exception as e:
        print(e)
        exit(1)


if target < 0:
    print('error: invalid target value (must be >= 0)')
    exit(1)

if timeout < 0:
    print('error: invalid timeout value (must be >= 0)')
    exit(1)

if free_scale_factor < 1:
    print('error: invalid scale factor value (must be >= 1)')
    exit(1)

if chunk_size_kbytes < 1:
    print('error: invalid chunk size value (must be >= 1)')
    exit(1)

if interval < 0:
    print('error: invalid interval value (must be >= 0)')
    exit(1)

if lock < 0 or lock > 1:
    print('error: invalid --lock option value (must be 0 or 1)')
    exit(1)


log('starting file-starve')


K = 1024
M = K * K
m = 1000000

# in bytes
CHUNK = K * chunk_size_kbytes

# MiB -> KiB
mem_file_target = K * target

MEMINFO = '/proc/meminfo'

VMSTAT = '/proc/vmstat'

PSI_MEMORY = '/proc/pressure/memory'

PSI_IO = '/proc/pressure/io'


fd = {}

fd[MEMINFO] = open(MEMINFO, 'rb', buffering=0)

meminfo_list = fd[MEMINFO].read().decode().split('\n')

meminfo_list_names = []

for line in meminfo_list:
    meminfo_list_names.append(line.split(':')[0])

mem_free_index = meminfo_list_names.index('MemFree')
active_file_index = meminfo_list_names.index('Active(file)')
inactive_file_index = meminfo_list_names.index('Inactive(file)')
mlocked_index = meminfo_list_names.index('Mlocked')
swap_total_index = meminfo_list_names.index('SwapTotal')
dirty_index = meminfo_list_names.index('Dirty')

fd[MEMINFO].seek(0)
m_list = fd[MEMINFO].read().decode().split(' kB\n')

mem_total = int(m_list[0].split(':')[1])
mlocked = int(m_list[mlocked_index].split(':')[1])
swap_total = int(m_list[swap_total_index].split(':')[1])
dirty = int(m_list[dirty_index].split(':')[1])

log('MemTotal: {}M, Mlocked: {}M, SwapTotal: {}M, Dirty: {}M'.format(
    round(mem_total / K, 1),
    round(mlocked / K, 1),
    round(swap_total / K, 1),
    round(dirty / K, 1)
))


fd[VMSTAT] = open(VMSTAT, 'rb', buffering=0)

lines = fd[VMSTAT].read().decode().split('\n')

for n, line in enumerate(lines):

    if line.startswith('pgpgin '):
        pgpgin_index = n

    if line.startswith('pgpgout '):
        pgpgout_index = n

    if line.startswith('pswpin '):
        pswpin_index = n

    if line.startswith('pswpout '):
        pswpout_index = n

    if line.startswith('pgfree '):
        pgfree_index = n

    if line.startswith('pgfault '):
        pgfault_index = n

    if line.startswith('pgmajfault '):
        pgmajfault_index = n

    if line.startswith('pgsteal_kswapd '):
        pgsteal_kswapd_index = n

    if line.startswith('pgsteal_direct '):
        pgsteal_direct_index = n

    if line.startswith('pgscan_kswapd '):
        pgscan_kswapd_index = n

    if line.startswith('pgscan_direct '):
        pgscan_direct_index = n
        break

VMSTAT_OK = True

try:
    check_vmstat()
except Exception as e:
    VMSTAT_OK = False
    log(e)
    log('W: cannot find the required vmstat metrics')


PSI_OK = True

try:
    fd[PSI_IO] = open(PSI_IO, 'rb', buffering=0)
    fd[PSI_MEMORY] = open(PSI_MEMORY, 'rb', buffering=0)
    fd[PSI_IO].read(1)
except Exception:
    PSI_OK = False
    log('W: PSI mertics are not available')


if dev == '':
    DEV_OK = False
    log('W: device name to track I/O stats is not set')
else:
    DEV_OK = True
    log('device name to track I/O stats: {}'.format(dev))

if dev.isdigit():
    log('W: invalid device name: {}'.format(dev))
    log('check /proc/diskstats to find available devices')
    exit(1)

if DEV_OK:
    DEV_SEPARATOR = ' ' + dev + ' '
    T = 1000
    SECTOR = 512
    DISKSTATS = '/proc/diskstats'

if DEV_OK:
    try:
        fd[DISKSTATS] = open(DISKSTATS, 'rb', buffering=0)
    except Exception as e:
        DEV_OK = False
        log(e)

if DEV_OK:
    try:
        fd[DISKSTATS].read()
    except Exception as e:
        DEV_OK = False
        log(e)

if DEV_OK:
    check_diskstats()


kswapd_list = get_kswapd()

if len(kswapd_list) > 0:
    KSWAPD_OK = True
    SC_CLK_TCK = sysconf(sysconf_names['SC_CLK_TCK'])
    for i in kswapd_list:
        pid = i[0]
        fd[pid] = open('/proc/{}/stat'.format(pid), 'rb', buffering=0)
else:
    KSWAPD_OK = False
    log('W: kswapd not found (missing permissions?)')


sig_list = [SIGTERM, SIGINT, SIGQUIT, SIGHUP]

for i in sig_list:
    signal(i, signal_handler)


with open('/proc/self/oom_score_adj', 'w') as f:
    f.write('1000\n')

if lock == 1:
    mlockall()

log('  target file LRU lists size: {}M'.format(target))
log('  keep starved (timeout):     {}s'.format(timeout))
log('  MemFree scale factor:       {}'.format(free_scale_factor))
log('  chunk size:                 {}K'.format(chunk_size_kbytes))
log('  output interval:            {}s'.format(interval))

restrict_file_lists()
